#+TITLE: Emacs configuration file
#+AUTHOR: Jacob Budzis
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to keep my =~/.emacs.d= organized. This is all based off of [[https://raw.githubusercontent.com/larstvei/dot-emacs/master/init.org][this repository]], where I stole much of the setup and initial configurations. 

If you would like to try out this config, follow these steps:

Clone the repo.
#+BEGIN_SRC sh :tangle no
git clone https://github.com/jacobbudzis/dot-emacs
#+END_SRC

Backup your old =~/.emacs.d= (if necessary).
#+BEGIN_SRC sh :tangle no
mv ~/.emacs.d ~/.emacs.d-bak
#+END_SRC

Backup your old =~/.emacs=-file (if necessary).
#+BEGIN_SRC sh :tangle no
mv ~/.emacs ~/.emacs-bak
#+END_SRC

And finally
#+BEGIN_SRC sh :tangle no
mv dot-emacs ~/.emacs.d
#+END_SRC

On first run it should install a bunch of packages (this might take a while), and you might have to restart your Emacs the first time. 

* Configurations
** Meta

All changes to the configuration should be done in =init.org=, *not* in =init.el=. Any changes in the =init.el= will be overwritten by saving =init.org=. The =init.el= in this repo should not be tracked by git, and is replaced the first time Emacs is started (assuming it has been renamed to =~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions to extract the code blocks and write them to a file. There are multiple ways of handling this; this method was taken from the original author of this org file. The basics of the approach are as follow.

When this configuration is loaded for the first time, the ~init.el~ is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

It tangles the org-file, so that this file is overwritten with the actual configuration.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

I want lexical scoping for the init-file, which can be specified in the header. The first line of the configuration is as follows:

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

The =init.el= should (after the first run) mirror the source blocks in the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts the code blocks from the current file into a source-specific file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to the =after-save-hook= ensuring to always tangle and byte-compile the =org=-document after changes.

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

I like to keep a few settings private, so we load a =private.el= if it exists after the init-file has loaded.

#+BEGIN_SRC emacs-lisp
(add-hook
 'after-init-hook
 (lambda ()
   (let ((private-file (concat user-emacs-directory "private.el")))
     (when (file-exists-p private-file)
       (load-file private-file)))))
#+END_SRC

** Packages

Managing extensions for Emacs is simplified using =package= which is built in to Emacs 24 and newer. To load downloaded packages we need to initialize =package=. =cl= is a library that contains many functions from Common Lisp, and comes in handy quite often, so we want to make sure it's loaded, along with =package=, which is obviously needed.

#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)
(package-initialize)
#+END_SRC

Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive and is well maintained.

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
#+END_SRC

The configuration assumes that the packages listed below are installed. To ensure we install missing packages if they are missing.

#+BEGIN_SRC emacs-lisp
(let* ((package--builtins nil)
       (packages
        '(ace-jump-mode        ; A quick cursor location minor mode for emacs
          company              ; Modular text completion framework
          counsel              ; Various completion functions using Ivy
          doom-modeline        ; A minimal and modern modeline
          editorconfig         ; EditorConfig Emacs Plugin
          expand-region        ; Increase selected region by semantic units.
          ivy                  ; Incremental Vertical completYon
          magit                ; control Git from Emacs
          multiple-cursors     ; Multiple cursors for Emacs.
          omnisharp            ; Omnicompletion (intellisense) and more for C#
          org                  ; Outline-based notes management and organizer
          swiper               ; Isearch with an overview. Oh, man!
          try                  ; Try out Emacs packages
          which-key)))         ; Display available keybindings in popup
  (ignore-errors ;; This package is only relevant for Mac OS X.
    (when (memq window-system '(mac ns))
      (push 'exec-path-from-shell packages)
      (push 'reveal-in-osx-finder packages))
    (let ((packages (remove-if 'package-installed-p packages)))
      (when packages
        ;; Install uninstalled packages
        (package-refresh-contents)
        (mapc 'package-install packages)))))
#+END_SRC

** Mac OS X

I run this configuration mostly on Mac OS X, so we need a couple of settings to make things work smoothly. In the package section =exec-path-from-shell= is included (only if you're running OS X), this is to include environment-variables from the shell. It makes using Emacs along with external processes a lot simpler. 

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (setq ns-pop-up-frames nil
        select-enable-clipboard t)
  (exec-path-from-shell-initialize)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))'
#+END_SRC

Map the OSX command key to be meta as it is in a better location for thumb pressing. Additionally, we can change control to be a super key since it no longer needs to fill the role of meta.

#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'super)
#+END_SRC

** Ivy
 
I choose to use Ivy over =ido-mode= and =helm= due to familarity. There is a nice [[http://sam217pa.github.io/2016/09/13/from-helm-to-ivy][blog post]] which discusses Helm's large size and it was one of the reasons I initially chose to use Ivy. A different framework may eventually replace Ivy if it has features which better fit my workflow.

This [[http://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][presentation]] describes Ivy, Swiper, and Counsel in a very nice fashion. To the best of my limited understanding, Ivy is an API which exposes interfaces to list, search, and perform actions on a collection of things. Swiper uses that interface to search for content within a buffer. Counsel uses that interface to perform completions in mini-buffers.

The commands I most often use are setup below

#+BEGIN_SRC emacs-lisp
;; Enable Ivy mode
(ivy-mode 1)

;; Use the maintainer's suggested commands
(setq ivy-use-virtual-buffers t) ;; Add recent files and bookmarks to the ivy-switch-buffer
(setq ivy-count-format "%d/%d ") ;; Displays the current and total number in the collection in the prompt

;; Setup important key bindings
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
#+END_SRC

** Editor Customizations

Increase the screen-space available for emacs by disabling the toolbar, menubar, and scrollbar. This also forces me to not use the mouse, which is one of the advantages of emacs.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Disable the startup splash screen. This will open a =*scratch*= buffer by default instead.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Highlight a parenthesis' partner when hovering over the symbol. This makes it easier to read functions that has a lot of nested statements.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Setup line wrapping to allow me to properly look at code on my horizontal monitor, vertical monitor, and tiny laptop screen. This makes it so that I don't have to manually break lines in my org-mode files.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

Sometimes I accidentally press =C-x C-c= instead of =C-x C-s= and close emacs; instead of saving my file I throw out all of its progress. To fix that problem, add another check before closing emacs.

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Visual Theme

I use my personal version of the uJelly theme, which may be found on my Github.

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/Themes/Emacs-Jelly-Theme")
(load-theme 'ujelly t)
#+END_SRC

The =doom-modeline= package makes the modeline look much nicer. It requires a one-time command invocation of =M-x all-the-icons-install-fonts= from the =all-the-icons= package.

#+BEGIN_SRC emacs-lisp
(doom-modeline-mode 1)
#+END_SRC


** Org Mode

Enable =org-indent-mode= which properly indents paragraphs to match the heading level. This makes it nice to write/read long paragraphs within org-mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Which-Key

I use the =which-key= package for discoverability. If I am in a buffer and want to see the common keybindings, I will press =C-x= and wait for which-key to show me common completions.

#+BEGIN_SRC emacs-lisp
(which-key-mode)
#+END_SRC

** Magit

Many blogs and tutorials have =C-x g= set to Magit status, but it seems as though that doesn't work by default on my system. I want to fix that as it is a useful command.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Company Mode

This package turns Emacs into an IDE with code-completions and code defintions (using =f1=). We enable it in all buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

The way company mode works is by using the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] to analyze the current program and find defintions, auto-completions, and documentation that is relevant at the moment. We will add LSP backends that are not supported by default by =company=.

Since I do a lot of game-development in Unity, I will interface with =omnisharp= to get completions for =C#= files that use the Mono framework. The github for this package is [[https://github.com/OmniSharp/omnisharp-emacs][here]]. We setup the backend as follows.

#+BEGIN_SRC emacs-lisp
;; NOTE: We require that Mono is installed on our system: https://www.mono-project.com/download/stable/
(add-hook 'after-init-hook 'global-company-mode)
(eval-after-load
 'company
 '(add-to-list 'company-backends 'company-omnisharp))

(add-hook 'csharp-mode-hook #'company-mode)
#+END_SRC

** EditorConfig

In order to maintain a consistent coding format when working with other people, I have decided to opt for using the [[https://editorconfig.org/][EditorConfig]] system to automatically enforce coding styles across different projects and IDEs. EditorConfig will look for .editorconfig files in the [[https://editorconfig-specification.readthedocs.io/en/latest/][current and parent directories]] in order to define the style.  We always wish to enable this plugin.

#+BEGIN_SRC emacs-lisp
(editorconfig-mode 1)
#+END_SRC

** Emacs Rocks!

These are packages created by Magnar Sveen, the brilliant youtuber behind Emacs Rocks! I really enjoy using them.

#+BEGIN_SRC emacs-lisp
;; Multiple Cursors
;; Adding a cursor for every line in the region
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; Adding a cursor based on keywords
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; Expand Region
;; Expand in terms of semantic units. The reverse can be achieved with C-- C-=
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Ace Jump Mode

Move around the current buffer at breakneck speeds.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC

